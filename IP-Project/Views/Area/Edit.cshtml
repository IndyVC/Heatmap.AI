@model IP_Project.Models.FloorPlanViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Index";
}
<head>
    <link href="~/css/style.css" rel="stylesheet" type="text/css" />
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css">
    <!-- Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap">
    <!-- Bootstrap core CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.1/css/bootstrap.min.css" rel="stylesheet">
    <!-- Material Design Bootstrap -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.13.0/css/mdb.min.css" rel="stylesheet">
    <!-- JQuery -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <!-- Bootstrap tooltips -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.4/umd/popper.min.js"></script>
    <!-- Bootstrap core JavaScript -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.1/js/bootstrap.min.js"></script>
    <!-- MDB core JavaScript -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.13.0/js/mdb.min.js"></script>
</head>
<body>
    @Html.Partial("_Header")
    <img src="~/img/heatmap.jpg" class="logo" />

    <div class="container">
        @{
            string error = "rgba(135,205,213,1)";
            string dimensions = Model.DimensionsJson;
        }
        <div class="all-floors">
            <button class="btn floorBtn" onclick="setFloor(0)">Ground floor</button>
            <button class="btn floorBtn" onclick="setFloor(1)">First floor</button>
            <button class="btn floorBtn" onclick="setFloor(2)">Second floor</button>
            <button class="btn floorBtn" onclick="setFloor(3)">Third floor</button>
        </div>
        <div class="drag-and-drop">
            <p class="drag-and-drop-title">Drag and drop a camera:</p>
            <a id="ball" class="mark-point" draggable="true" ondragstart="drag(event)"><i class="fas fa-plus"></i></a>
        </div>

        <div class="card own-card">
            <div class="map" ondrop="drop(event)" ondragover="allowDrop(event)" id="groundfloor-map" js-dimensions="@dimensions">

                <img src="~/img/floor0.png" class="floorplan" id="groundfloor" />

            </div>
            <div class="card-body content-card">
                <h2 class="card-title" id="floor-title">Ground floor</h2>
            </div>
        </div>
        <div>
            <button class="btn floorBtn" onclick="postAreas()">Save cameras</button>
            <button class="btn floorBtn" onclick="clearAreas()">Clear cameras</button>
        </div>
    </div>


    <!-- Modal -->
    <div class="modal fade" id="details-modal" tabindex="-1" role="dialog"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Create camera</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <label>Area number</label>
                        <input class="form-control" id="area-number" />
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn floorBtn" data-dismiss="modal">Close</button>
                    <button type="button" class="btn floorBtn" onclick="saveArea()">Save changes</button>
                </div>
            </div>
        </div>
    </div>
</body>

<script>
    let x = 0;
    let y = 0;
    let areas = [];
    let floor = 0;
    $(document).ready(function() {
        setFloor(0);
    });
    function showAreas(floor) {
        $(".mark-delete").remove();
        const serializedEvents = $("#groundfloor-map").attr('js-dimensions');
        let dimensions = [];
        if (serializedEvents !== null && typeof (serializedEvents) !== 'undefined' && serializedEvents.length > 0 && serializedEvents.match(/^ *$/) === null) {
            dimensions = JSON.parse($("#groundfloor-map").attr('js-dimensions'));
        }
        if (dimensions.length > 0) {
            dimensions.forEach(dim => {
                if (dim.Floor == floor) {
                    const left = dim.Width + "%";
                    const top = dim.Height + "%";
                    const error = "rgba(135,205,213,1)";
                     document.getElementById("groundfloor-map").insertAdjacentHTML('beforeend', 
                        `<a class="mark-point mark-delete" style=left:${left};top:${top};position:absolute;> <i class="fas fa-plus"></i></a >`
                    );
                }
            })
        }
    }

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    function drop(ev) {
        ev.preventDefault();
        let groundfloorMap = document.getElementById("groundfloor-map");
        let scrollTop = document.all ? iebody.scrollTop : pageYOffset
        let x = ev.x;
        let y = ev.y;
        let ix = $("#groundfloor").offset().left
        let iy = $("#groundfloor").offset().top
        x = (x - 20 - ix) / 1000 * 100;
        y = (y - 20 - iy + scrollTop) / 650 * 100;
        drawDimension(x, y, groundfloorMap);
    }

    function drawDimension(x, y, floor) {
        const error = "rgba(135,205,213,1)";
        floor.insertAdjacentHTML('beforeend', `<a class="mark-point mark-delete" style="left:${x}%;top:${y}%;position:absolute;" data-toggle="modal" data-target="#details-modal" onclick="setDimensions(${x},${y})"><i class="fas fa-plus"></i></a>`);
    }

    function setDimensions(width, height) {
        x = width;
        y = height;
    }

    function saveArea() {
        const areaNumber = $("#area-number").val();
        areas.push(new Dimension(areaNumber, x, y, floor));
        $("#details-modal").modal('hide');
    }

    function postAreas() {
        $.post({
            url: '/Area/AddDimensions/',
            dataType: 'json',
            contentType: "application/json",
            data: JSON.stringify(areas),
            success: function (result) {
                if (result) {
                    window.location.href = "/Area/Index/0"
                }
            }
        });

    }

    function clearAreas() {
        $.post({
            url: "/Area/DeleteAllDimensions/",
            dataType: 'json',
            data: `${floor}`,
            contentType: "application/json",
            success: function (result) {
                if (result) {
                    window.location.href = "/Area/Index/0"
                }
            }
        });
    }

    function setFloor(x) {
        floor = x;
        let src = "";
        let innerHtml = "";
        switch (x) {
            case 0:
                src = "/img/floor0.png";
                innerHtml = "Ground Floor";
                break;
            case 1:
                src = "/img/floor1.png";
                innerHtml = "First Floor";
                break;
            case 2:
                src = "/img/floor2.png";
                innerHtml = "Second Floor";
                break;
            case 3:
                src = "/img/floor3.png";
                innerHtml = "Third Floor";
                break;
        }
        showAreas(floor)
        $("#groundfloor").attr("src", src)
        $("#floor-title").text(innerHtml);

    }

    class Dimension {
        constructor(areaNumber, width, height, floor) {
            this.AreaNumber = areaNumber;
            this.Width = width;
            this.Height = height;
            this.Floor = floor;
        }
    }
</script>
